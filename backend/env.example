# RagBridge Backend 환경 변수 설정

## 필수 환경 변수

### 애플리케이션 설정
DEBUG=false
APP_NAME="RagBridge API Gateway"
VERSION="1.0.0"

### 데이터베이스 설정
DB_URL="postgresql+asyncpg://user:password@localhost:5432/ragbridge"
DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10

### JWT 인증 설정
API_JWT_SECRET="your-super-secret-jwt-key-change-this-in-production"
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7
ALGORITHM="HS256"

### CORS 설정
CORS_ORIGINS=["http://localhost:3000", "https://your-frontend-domain.com"]

### Redis 설정 (캐싱 및 세션)
REDIS_URL="redis://localhost:6379"
REDIS_PASSWORD=""
REDIS_DB=0

### S3 스토리지 설정
S3_BUCKET_URL="s3://your-bucket-name"
S3_ACCESS_KEY="your-access-key"
S3_SECRET_KEY="your-secret-key"
S3_REGION="us-east-1"

### Kafka 설정
KAFKA_BROKERS="localhost:9092"
SCHEMA_REGISTRY_URL="http://localhost:8081"
KAFKA_SASL_USERNAME=""
KAFKA_SASL_PASSWORD=""
KAFKA_SASL_MECHANISM="PLAIN"

### 로깅 설정
LOG_LEVEL="INFO"
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"

## 선택적 환경 변수

### AI/ML 설정
OPENAI_API_KEY="your-openai-api-key"
EMBEDDING_MODEL="sentence-transformers/all-MiniLM-L6-v2"
MLFLOW_TRACKING_URI="http://localhost:5000"
MODEL_REGISTRY_URI="http://localhost:5000"

### 모니터링 설정
PROMETHEUS_URL="http://localhost:9090"
GRAFANA_URL="http://localhost:3000"
SENTRY_DSN="your-sentry-dsn"

### 이메일 설정 (알림용)
SMTP_HOST="smtp.gmail.com"
SMTP_PORT=587
SMTP_USERNAME="your-email@gmail.com"
SMTP_PASSWORD="your-app-password"
SMTP_USE_TLS=true

## 개발 환경 설정

### 로컬 개발용
DEBUG=true
DB_URL="sqlite+aiosqlite:///./ragbridge.db"
CORS_ORIGINS=["http://localhost:3000", "http://127.0.0.1:3000"]
LOG_LEVEL="DEBUG"

### 테스트 환경용
TEST_DB_URL="sqlite+aiosqlite:///:memory:"
TESTING=true

## 프로덕션 환경 설정

### 보안 강화
DEBUG=false
API_JWT_SECRET="very-long-random-secret-key-for-production"
CORS_ORIGINS=["https://your-production-domain.com"]
LOG_LEVEL="WARNING"

### 성능 최적화
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=30
REDIS_PASSWORD="strong-redis-password"

## 환경 변수 설정 방법

### 1. .env 파일 생성
```bash
cp env.example .env
# .env 파일을 편집하여 실제 값으로 변경
```

### 2. 시스템 환경 변수 설정
```bash
export DB_URL="postgresql+asyncpg://user:password@localhost:5432/ragbridge"
export API_JWT_SECRET="your-secret-key"
```

### 3. Docker 환경 변수
```yaml
environment:
  - DB_URL=postgresql+asyncpg://user:password@db:5432/ragbridge
  - API_JWT_SECRET=your-secret-key
  - CORS_ORIGINS=["http://localhost:3000"]
```

## 보안 주의사항

1. **API_JWT_SECRET**: 프로덕션에서는 반드시 강력한 랜덤 키 사용
2. **데이터베이스 비밀번호**: 복잡한 비밀번호 사용
3. **Redis 비밀번호**: 프로덕션에서는 반드시 설정
4. **S3 키**: 최소 권한 원칙 적용
5. **CORS_ORIGINS**: 허용할 도메인만 명시적으로 설정

## 환경별 설정 예시

### 개발 환경
```bash
DEBUG=true
DB_URL="sqlite+aiosqlite:///./dev.db"
CORS_ORIGINS=["http://localhost:3000"]
LOG_LEVEL="DEBUG"
```

### 스테이징 환경
```bash
DEBUG=false
DB_URL="postgresql+asyncpg://staging_user:staging_pass@staging-db:5432/ragbridge_staging"
CORS_ORIGINS=["https://staging.ragbridge.com"]
LOG_LEVEL="INFO"
```

### 프로덕션 환경
```bash
DEBUG=false
DB_URL="postgresql+asyncpg://prod_user:prod_pass@prod-db:5432/ragbridge_prod"
API_JWT_SECRET="very-long-random-secret-key-for-production"
CORS_ORIGINS=["https://ragbridge.com"]
LOG_LEVEL="WARNING"
REDIS_PASSWORD="strong-redis-password"
```
